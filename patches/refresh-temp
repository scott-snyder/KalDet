Bottom: 9620d36b724f3debf0b60c3b8d0b9ecccee88143
Top:    31a3770b88aa41bb31ea86bdd81e590923091402
Author: scott snyder <sss@karma>
Date:   2020-02-12 09:32:08 -0500

Refresh of warn

---

diff --git a/ild/common/ILDConeMeasLayer.cc b/ild/common/ILDConeMeasLayer.cc
index 5340015..9515091 100644
--- a/ild/common/ILDConeMeasLayer.cc
+++ b/ild/common/ILDConeMeasLayer.cc
@@ -122,15 +122,15 @@ Bool_t ILDConeMeasLayer::IsOnSurface(const TVector3 &xx) const
     Double_t r   = xxc.Perp();
     Double_t z   = xxc.Z();
     Double_t s   = (r - GetTanA()*z) * (r + GetTanA()*z);
-    const Double_t kTol = 1.e-8;
+    const Double_t tol = 1.e-8;
 
 #if 0
     std::cout << this->TVMeasLayer::GetName() << ":" << this->GetIndex() << ":" << std::endl;
     std::cout << "s=" << s << " xx=(" << xx.X() << "," << xx.Y() << "," << xx.Z() << ")" << std::endl;
-    std::cout << "bool=" << (TMath::Abs(s) < kTol && ((xx.Z()-fZ1)*(xx.Z()-fZ2) <= 0.)) << std::endl;
+    std::cout << "bool=" << (TMath::Abs(s) < tol && ((xx.Z()-fZ1)*(xx.Z()-fZ2) <= 0.)) << std::endl;
     std::cout << "fZ1=" << fZ1 << " fZ2=" << fZ2 << std::endl;
 #endif
 
-    return (TMath::Abs(s) < kTol && ((xx.Z()-fZ1)*(xx.Z()-fZ2) <= 0.));
+    return (TMath::Abs(s) < tol && ((xx.Z()-fZ1)*(xx.Z()-fZ2) <= 0.));
 } 
 
diff --git a/ild/ftd/ILDFTDKalDetector.cc b/ild/ftd/ILDFTDKalDetector.cc
index fae617c..0477ba8 100644
--- a/ild/ftd/ILDFTDKalDetector.cc
+++ b/ild/ftd/ILDFTDKalDetector.cc
@@ -389,8 +389,10 @@ void ILDFTDKalDetector::setupGearGeom( const gear::GearMgr& gearMgr ){
   //           if this is not done then the exposed areas of the support would leave a carbon - air boundary,
   //           which if traversed in the reverse direction to the next boundary then the track be propagated through carbon
   //           for a significant distance 
-  
+
+#ifndef NDEBUG  
   double eps = 1.0e-08;
+#endif
   
   for(int disk=0; disk< _nDisks; ++disk){
     
@@ -479,7 +481,8 @@ void ILDFTDKalDetector::setupGearGeom( const gear::GearMgr& gearMgr ){
     }
     
     // there should be no gap between support and sensitive
-    
+
+#ifndef NDEBUG
     for( int iPetal=0; iPetal< _FTDgeo[disk].nPetals; iPetal++){
       
       
@@ -491,6 +494,7 @@ void ILDFTDKalDetector::setupGearGeom( const gear::GearMgr& gearMgr ){
       assert( fabs( endSensitive- endSupport ) < eps ); 
       
     }
+#endif
     
     ////////////////////////////////////////////////////////////////////////////////////////////////////////
     
diff --git a/ild/support/ILDSupportKalDetector.cc b/ild/support/ILDSupportKalDetector.cc
index d686ea7..cfbee3f 100644
--- a/ild/support/ILDSupportKalDetector.cc
+++ b/ild/support/ILDSupportKalDetector.cc
@@ -76,10 +76,10 @@ TVKalDetector(10)
     
     
     //SJA:FIXME: HERE WE NEED TO MAKE SURE THAT THE BEAM PIPE IS NEVER DECREASING IN RADII OTHERWISE THE SORTING GOES WRONG
-    if ( rInnerStart < rInnerStart_last ) rInnerStart = rInnerStart_last; rInnerStart_last = rInnerStart;
-    if ( rInnerEnd   < rInnerEnd_last   ) rInnerEnd   = rInnerEnd_last  ; rInnerEnd_last   = rInnerEnd;
-    if ( rOuterStart < rOuterStart_last ) rOuterStart = rOuterStart_last; rOuterStart_last = rOuterStart;
-    if ( rOuterEnd   < rOuterEnd_last   ) rOuterEnd   = rOuterEnd_last;   rOuterEnd_last   = rOuterEnd;
+    rInnerStart = std::max (rInnerStart, rInnerStart_last); rInnerStart_last = rInnerStart;
+    rInnerEnd   = std::max (rInnerEnd, rInnerEnd_last); rInnerEnd_last   = rInnerEnd;
+    rOuterStart = std::max (rOuterStart, rOuterStart_last); rOuterStart_last = rOuterStart;
+    rOuterEnd   = std::max (rOuterEnd, rOuterEnd_last);   rOuterEnd_last   = rOuterEnd;
     
     
     std::stringstream sname;
